% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GBSel.R
\name{GBSel}
\alias{GBSel}
\title{Perform GBSel to train and predict data sets}
\usage{
GBSel(
  y_train,
  X_train,
  X_test,
  nIter = c(10, 10, 10),
  fold = 5,
  py.lib = py.lib,
  Parallel = FALSE,
  stacking = FALSE
)
}
\arguments{
\item{y_train}{a phenotype vector of type numeric for training}

\item{X_train}{a genotype matrix of type numeric for training}

\item{X_test}{a genotype matrix of type numeric, the verification group(or no phenotype group) required to calculate GEBV}

\item{nIter}{a vector of number of iterations for three base models, Ridge, SVR, and KRR, in that order}

\item{fold}{the number of folds of cross-validation at the base layer}

\item{py.lib}{load python module sklearn and numpy}

\item{Parallel}{parallel or not}

\item{stacking}{whether to output the stacking results at the same time}
}
\value{
A list of prediction values for train set and test set from GBSel and stacking(if stacking is TRUE)
}
\description{
\code{GBSel}Perform GBSel to train and predict data sets
}
\examples{
X <- genotype
X.FR <- Feature.reduce(X = X, method="GRM")
y.train <- phenotype[c(1:200),1]
X.train <- X.FR[c(1:200),]
X.test <- X.FR[-c(1:200),]
path <- reticulate::py_discover_config()
py.lib <- python.env(env="python", env.path=path$python, module.check=TRUE)	
GBSel.fit <- GBSel(y_train=y.train,X_train=X.train,X_test=X.test,py.lib=py.lib,Parallel=FALSE)

}
